jmp @main

; due to the nature of the following instructions, register values cannot be preserved, so this function does it through the database ;
db_preserve_registers:
	push %eax
	; TODO: Implement preservation ;
	pop %eax
	ret @db_preserve_registers

; addition instruction (pops 2 values off the stack and pushes the result of their addition) ;
add_instr:
	pop %gr1
	pop %gr2
	mov %eax 0
	add %eax %gr1 %gr2
	push %eax
	ret @add_instr

; subtraction instruction (pops 2 values off the stack and pushes the result of their subtraction) ;
sub_instr:
	pop %gr1
	pop %gr2
	mov %eax 0
	sub %eax %gr1 %gr2
	push %eax
	ret @sub_instr

; multiplication instruction (pops 2 values off the stack and pushes the result of their multiplication) ;
mul_instr:
	pop %gr1
	pop %gr2
	mov %eax 0
	mul %eax %gr1 %gr2
	push %eax
	ret @mul_instr

; division instruction (pops 2 values off the stack and pushes the result of their division) ;
div_instr:
	pop %gr1
	pop %gr2
	mov %eax 0
	div %eax %gr1 %gr2
	push %eax
	ret @div_instr

; negation instruction (pops a value of the stack, and pushes it's negative) ;
neg_instr:
	pop %gr1
	neg %gr1 
	push %gr1 
	ret @neg_instr




